= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
MariaDB, MySQL binaries install - updated: 2024-10-18 05:50
= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =



(1) MySQL-8.0 Windows install:

(1.1) Enter mysql home directory:

cd D:\opt\mysql\mysql-8.0.39-win64

All following commands will be executed from that directory.

(1.2) Check possible options/config file:

.\bin\mysql.exe --help

Before data dir initialization (next step), no options/config file should exist.

(1.3) initialize data dir, insecure mode (user root created with no password):

.\bin\mysqld.exe --initialize-insecure --datadir .\data

(1.4) run mysqld as console/terminal process:

.\bin\mysqld.exe --console

(1.5) open new terminal window, start mysql client session, user root, no password:

.\bin\mysql.exe -u root --skip-password

(1.6) into mysql client console/terminal session, assign password:

ALTER USER 'root'@'localhost' IDENTIFIED BY '1234';

(1.7) exit mysql client session:

\q

(1.8) Trying to initiate mysql client without password should fail:

.\bin\mysql.exe -u root --skip-password

(1.9) Trying to initiate mysql client with password should succeed:

.\bin\mysql.exe -u root -p

(prompt asking for password appears, enter it)

(1.10) Stop mysqld process, populate my.ini file, restart mysqld process.

(1.11) Add MySQL "bin" folder to global variable "PATH".

(1.12) Detailed information on installation from ZIP file:

https://dev.mysql.com/doc/refman/8.0/en/windows-install-archive.html

https://dev.mysql.com/doc/refman/8.0/en/data-directory-initialization.html

https://dev.mysql.com/doc/refman/8.0/en/server-options.html#option_mysqld_initialize-insecure

https://dev.mysql.com/doc/refman/8.0/en/data-directory-initialization.html#data-directory-initialization-password-assignment

(1.13) When initializing jdbc connections, this exception may be thrown: "Public Key retrieval not allowed".

There are two solutions: add parameter to client-url connection, or alter user and restart server.

(1.13.1) Add parameter to client-url

Jdbc client url example:

jdbc:mysql://localhost:3306/my_database?useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&useSSL=false

To prevent mentioned exception, add parameter:

&allowPublicKeyRetrieval=true

(1.13.2) Alter user

Query/alter user:

# Results with plugin/auth_plugin different to 'mysql_nativa_password' provoke 'Public Key Retrieval is not allowed' error

# User and password creation as described in previous steps, seems to establish 'caching_sha2_password' as default plugin/auth_plugin

SELECT user, host, plugin FROM mysql.user ; 

# Alter user to use 'mysql_nativa_password' plugin/auth_plugin

ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '1234' ;

This was also indicated by documentation, but was not necessary: add it to mysql.conf file:

[mysqld]
...
mysql_native_password=ON 

(1.13.3) MySQL server console message:

2024-09-09T12:26:57.576466Z 8 [Warning] [MY-013360] [Server] Plugin mysql_native_password reported: ''mysql_native_password' is deprecated and will be removed in a future release. Please use caching_sha2_password instead'

(1.14) Pending: review "mariadb-install-db" command



(2) At cmd, "bin" folder, run "mariadb --help" or "mysql --help" to:

- Check default locations for file "my.ini".

- Check root directory installation.



(3) Content of file "my.ini":

[mysqld]

# main properties

# 'datadir' was defined in install / initialization

datadir=/opt/mariadb/mariadb-10.6.5/data

port=3306

max_connections=10

innodb_buffer_pool_size=1269M

character-set-server=utf8

# timeouts (waiting time before disconnect), in seconds

### connection package from client

connect_timeout = 10

### input data from client (example: client batch process)

net_read_timeout = 30

### lifetime of idle client connection

wait_timeout = 600

### overrides "wait_timeout" in interactive client connection

interactive_timeout = 600


[client]

port=3306

plugin-dir=/opt/mariadb/mariadb-10.6.5/lib/plugin



(4) (empty)



(5) Start server daemon:

mariadbd --console

It's also possible to start several services, each referring to a specific ini file:

.\bin\mysqld.exe --defaults-file=.\my.ini --console

mariadbd --defaults-file=D:\opt\mariadb\mariadb-10.6.5\my.dev-0.ini --console

mariadbd --defaults-file=/etc/mariadb/maria.ini --console

In each .ini file, adjust 'datadir' and 'port' as convenient.



(6) Test Mariadb client, from shell/cmd:

Execution, interactive console/shell (test need of winpty):

winpty mysql --user=root --password=1234 --host=127.0.0.1 --port=3306 --database=information_schema


Execution, batch console/shell (test need of --database, -D):

mysql -B -u root --password=1234 -h 127.0.0.1 -P 3306 -D information_schema -e 'select 1 as my_integer;'

echo 'select 1 as myint' | mysql -B -u root --password=1234 -h 127.0.0.1 -P 3306

mysql -B -u root --password=1234 -h 127.0.0.1 -P 3306 < <( echo 'select 1 as myint;' )


Other console/shell options:

-p: prompt for password

-e, --execute "SELECT 1 AS my_integer;": execute sql, connection is set as non-interactive

-E, --vertical: transpose result, columns as rows

--connection-timeout=30: set 30 secs to wait for connection package before disconnect


Console output options:

-t, --table: human-friendly output, not useful for post-processing

-B, --batch: connect as non-interactive client, output is silent (tabbed) with column names

-s, --silent: tabbed output, no column names, see batch option

-X, --xml: xml output

-H, --html: html output

--column-names: print column names (see options batch, silent)

--line-numbers: print line number on error

-v: verbose output



(7.1) Check variables from client (parameters in my.ini):

(7.1.1) Global variables

SHOW VARIABLES LIKE '%version%';

SHOW VARIABLES LIKE '%timeout%';

SHOW TABLES WHERE Tables_in_information_schema LIKE '%variable%'

SELECT * FROM global_variables LIMIT 1

SELECT * FROM global_variables WHERE variable_name LIKE '%timeout%'

(7.1.2) Session variables

(pending)



(7.2) Check processlist from client (connected clients):

SHOW PROCESSLIST;

SELECT * FROM information_schema.`PROCESSLIST` WHERE TRUE AND HOST LIKE '51.210.159%';



(7.3) Check databases, tables, status from client:

SHOW DATABASES LIKE '%dev%';

SHOW TABLES LIKE '%product%';

SHOW OPEN TABLES LIKE '%product%';

SHOW STATUS LIKE '%connection%';

SHOW PROFILES ; -- deprecated, use Performance_Schema instead



(7.4) TEMPORAL, ORDER, TODO:

USE information_schema ;

-- variables
SHOW SESSION VARIABLES LIKE '%wait%timeout%' ; -- wait_timeout
SHOW SESSION VARIABLES LIKE '%int%timeout%' ; -- interactive_timeout
SHOW SESSION VARIABLES LIKE '%read%timeout%' ; -- net_read_timeout
SHOW SESSION VARIABLES LIKE '%max%conn%' ; -- max_connections, extra_max_connections
SHOW SESSION VARIABLES LIKE '%timeout%' ; -- other

-- status
SHOW GLOBAL STATUS ;
SHOW GLOBAL STATUS LIKE '%thread%conn%'; -- threads_connected
SHOW GLOBAL STATUS LIKE '%connections%'; -- connections (total/accumulated), max_used_connections (peak/max demand)
SHOW GLOBAL STATUS LIKE '%conn%'; -- other
SELECT CONNECTION_ID(); -- current session connection_id

-- processlist
SHOW PROCESSLIST ;

-- table from constants, several rows
SELECT 1 AS my_int UNION SELECT 2 UNION SELECT 3 ;



(7.5) TEMPORAL, ORDER, TODO:

-- test "wait_timeout"
-- how to test "net_read_timeout"?
{ sleep 0 ; echo 'select connection_id();' ; echo "show global variables like '%wait%timeout%';" ; echo "show global variables like '%read%timeout%';" ; sleep 0 ; echo 'select connection_id();' ; echo 'show processlist;' ; sleep 0 ; } | mysql -s -u root -h 127.0.0.1 -P 3306 -D information_schema --password=1234 ;



(8) mysqldump, commandline utility:

mysqldump -u root --password=1234 -h localhost -P 3306 -B db01 db02 db03 | tr -d '\r' > dump-file.sql

mysqldump -u root --password=1234 -h localhost -P 3306 --add-drop-database --add-drop-table --skip-extended-insert --databases db01 db02 > dump-file.sql


Options:

B, --databases: databases to include in dump file

--add-drop-database

--add-drop-table

--skip-extended-insert: individual INSERT for each table row



(9) TEMPORAL, ORDER, TODO:

(9.1) initialization, install
mysqld --initialize --console
mysql -h localhost --password=mypassword --port 3306
ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyN3wP4ssw0rd'; flush privileges; exit; 
2023-03-29T09:53:08.756860Z 1 [Note] A temporary password is generated for root@localhost: XtzgNrz,n4-I

(9.2) get db version
SHOW VARIABLES LIKE 'version'; 

(9.3) mysql does not support "returning" token, do instead:
START TRANSACTION ;
INSERT INTO table(fields) VALUES (values) ;
SELECT LAST_INSERTED_ID() ;
COMMIT ; 




(10) TEMPORAL, ORDER, FAST-SQL SCRIPT:

#! /bin/bash

### variables
user='my_user'
host='my_host'
port='3306'
pass='my_password'
db='my_database'

### test query
echo -e '\n-->query 1, test:'
mysql -B -u $user --password=$pass -h $host -P $port -D $db -e 'select 1 as my_integer;'

### intended query, insert
echo -e '\n-->query 2, insert:'
# i=${1}   # command-line value assignment
i='10'     # direct value assignment
while [ $i -lt '12' ] ; do
    echo '--->i:'$i
    sql='USE '${db}'; '
    sql=${sql}'INSERT INTO `my_table` (`id`,`created_at`,`cif`,`bit_switch`) '
    sql=${sql}"VALUES ('id_prefix_"${i}"',NOW(),'123456789',UNHEX('01')); "
    echo $sql
    mysql -B -u $user --password=$pass -h $host -P $port -D $db -e "$sql"
    let 'i++'
    echo ''
done ;

### end of script



(11) TEMPORAL, ORDER, Temporally turn off constraints check

SET foreign_key_checks = 0; -- turn off

SET foreign_key_checks = 1; -- turn on



(12) TEMPORAL, ORDER, Date, Timestamp, time difference

DATETIME can store a wider range of values than TIMESTAMP. While DATETIME can store values from '1000-01-01 00:00:00.000000' to '9999-12-31 23:59:59.999999', TIMESTAMP can store values from '1970-01-01 00:00:01.000000' to '2038-01-19 03:14:07.999999 .

SELECT TIMESTAMPDIFF(SECOND, timestamp_start, timestamp_end) AS ts_difference ; -- only with TIMESTAMPS -- unit can be MICROSECOND , SECOND , MINUTE , HOUR , DAY , WEEK , MONTH , QUARTER , YEAR

SELECT (UNIX_TIMESTAMP(end_datetime) -  UNIX_TIMESTAMP(start_datetime)) AS diff_secs FROM execution WHERE id = 4000 ;  -- arg can be TIMESTAMP, DATETIME, DATE, TIME



(13) TEMPORAL, ORDER, temporary tables

-- temporary tables live in memory only during user db session

CREATE TEMPORARY TABLE `tmp_person` SELECT p.name, p.age FROM `person` p LIMIT 0 ; -- also use joins if necessary

INSERT INTO `tmp_person` SELECT p.name, p.age FROM `person` p WHERE p.age > 18 ; -- add more 'where' clauses if ncecessary

SELECT * FROM `tmp_person` t_p WHERE REGEXP '^alberto.*' ; -- do operations using temporary table

DROP TEMPORARY TABLE `tmp_person` ; -- drop temporary table



(14) TEMPORAL, ORDER, regex  -- this is different in v5 and v8! caution!

-- These tests where done on mysql v5.7 ; REGEXP is case insensitive unless BINARY option is used

SELECT ('ALBERTO' REGEXP 'Alberto') AS re ;

SELECT ('ALBERTO' REGEXP BINARY 'Alberto') AS re ;

SELECT `name` FROM person p WHERE p.name REGEXP 'alberto' ; 

-- Per documentation, this function changes on v5.8, tests not performed




(15) TEMPORAL, ORDER: time_zone, NOW(), UTC_TIMESTAMP()

SHOW GLOBAL VARIABLES LIKE '%time%zone%' ;

SHOW SESSION VARIABLES LIKE '%time%zone%' ;

SELECT UTC_TIMESTAMP();

SELECT NOW();

SET time_zone = '+00:00';

SET time_zone = 'SYSTEM';

url="jdbc:mysql://localhost:3306/dbname?serverTimezone=UTC"




(16) TEMPORAL, DUPLICATE EXISTING TABLE

USE `my_schema` ;

CREATE TABLE `my_target_table` LIKE `my_source_table` ;

INSERT INTO `my_target_table` SELECT * FROM `my_source_table` ;




(17) TEMPORAL, EXPLAIN, USE INDEX, FORCE INDEX

EXPLAIN SELECT * FROM `my_target_table` where `my_target_field` = 'something' ;

EXPLAIN SELECT * FROM `my_target_table` USE INDEX (`my_index`) where `my_target_field` = 'something' ;

EXPLAIN SELECT * FROM `my_target_table` FORCE INDEX (`my_index`) where `my_target_field` = 'something' ;



(18) TEMPORAL, IFNULL, COALESCE

SELECT IFNULL(NULL, '1') >= '0' ;

SELECT COALESCE(NULL,NULL,NULL,'7') >= '0';

SELECT COALESCE('1','2','3','7') >= '0';



(19) INSERT variations:

REPLACE INTO ...

INSERT IGNORE ...

