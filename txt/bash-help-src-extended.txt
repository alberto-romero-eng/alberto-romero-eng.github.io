# BHS -- updated: 2025-03-29 02:55

# {0} -- execute 'hi' for index

a:

alias:  Make aliases, show aliases.  Aliases can contain several commands, but take parameters only at the end (concatenation), not in between, as functions can do.  Aliases have the higher precedence over functions, builtins and executables.  Aliases are not recursive, so no worries with functions/builtins/executables having the same name.  See 'function', 'enable', 'bash' for more details on such precedence.  For diagnostics, see: 'alias <comm>', 'declare -f <comm>', 'which <comm>', 'enable -n'.  Option -p print.  Examples:  alias c='clear'  ;  alias c  ;  alias -p  ;  

apt-cache:  Search regex in packages name/description, according to local information.  Depends on last 'apt update' executed.  See also: apt, apt-file, dpkg, dpkg-query.  Options:  --names-only discard other fields regarding search pattern.  Example:  apt-cache search --names-only 'aptitude'

apt-file:  Search file in packages (installed or not).  This command uses a repository different from 'apt', which requires separate update.  See 'dpkg -S' for file search in installed packages.  A workflow to install a program would be: (1) `dpkg` to check if program/package is installed; (2) `apt-file` to search package containing program; (3) `apt` to install package.  See also: apt, apt-cache, dpkg, dpkg-query.  Actions:  update - update local repository, different from that of apt.  search - indicate repository which provides file.  Options:  -x pattern is regex.  Examples:  apt-file update  ;  apt-file search 'bin/bash'  ;  apt-file search -x 'bin/bash$'  ;  

apt:  A workflow to install a program would be: (1) `dpkg` to check if program/package is installed; (2) `apt-file` to search package containing program; (3) `apt` to install package.  See also: apt-cache, apt-file, dpkg, dpkg-query.  Options:  --names-only discard other fields regarding search pattern.  --fix-missing solve faulty package installs.  Examples:  apt search --names-only 'man-db'  ;  apt install --fix-missing 'man-db'  ;  

awk:  Execute program if line matches pattern.  Can perform flaoting-point operations.  Backreference \0 is matched string.  See also: cut, join.  Options:  -F field separator.  Examples:  ls -l | awk '/a/ { print $1 " " $3 }'  ;  echo '' | awk '{ print 1.1 + 2.2 }'  ;  echo -e '1|A|a\n2|B|b\n3|C|c' | awk -F '|' '{ print $1 ";" $2 ";" $3 ";" }'  ;  awk ' // { if ( $1 == "A" ) { $2 = "isA" } else if ( $1 == "B" ) { $2 = "isB" } else { $2 = "notANorB" } ; print $1 "|" $2 }' file.txt  ;

b:

basename:  See dirname, realpath, shopt (globstar).  Examples:  find . -iname '*' | xargs -n1 realpath  ;  find . -iname '*' | xargs -n1 basename  ;  find . -iname '*' | xargs -n1 dirname  ;  

bash:  Execute shell, string-script or file-script in new bash-child-process (sub-shell).  Precedence order: alias, function, builtin, executable.  Aliases are not recursive; functions can be.  Use 'command' in function implementation to avoid recursion.  Special variables: ${$} current bash pid, ${-} current bash options, ${0} current program, ${*} arguments (${1} ${2} ...), ${@} arguments as array, ${#} number of arguments, ${?} last command exit code, ${!} last sent-to-background command pid.  Redirection: use '(command) &> out.txt' or '(command) 1> out.txt 2>&1' to send program stdout and stderr to same stream.  Pipe: use '(command1) |& (command2)' to send both stdout and stderr of command1 to stdin of command2.  See also: alias, function, enable, command.  For diagnostics, see: 'alias <comm>', 'declare -f <comm>', 'which <comm>', 'enable -n'.  Options:  -c execute string-script.  -x debug.  -v print each sentence before execution.  Examples:  bash # execute subshell  ;  bash -c 'echo ${$} ; ps ;' # execute string-script  ;  bash -x ./file-script.sh # execute file-script with debug  ;  ./file-script.sh # execute file-script with shebang line (whose options could be customized)  ;  bash <( echo 'echo "${*}" ; echo "${@}" ;' ) __a__ __b__ * # test argument variables  ;  f() { for s in "${@}" ; do echo ${s} ; done ; } ; f 'A1 A2' 'B1 B2' # see also difference using ${*}, also using no quotes  ;  while read myline; do echo $myline; done < <( echo -e 'a\nb\nc' ) # loop through file lines  ;  echo -e 'a\nb\nc' | while read myline ; do echo $myline ; done; # idem  ;  

c:

cmd.exe:  Windows command, useful to execute sentences from git-bash, using option /C.  See also: 'mountvol', 'where', 'taskkill'.  Examples:  cmd.exe /C 'mountvol /E'  ;  cmd.exe /C 'taskkill /f /pid 1234'  ;  cmd.exe /C 'where notepad++'  ;  

cmd:  See 'cmd.exe', to execute sentences from git-bash.

cmp:  Compare two binary files.  See 'comm' to compare text files.  Example: cmp file1.bin file2.bin  ;

comm:  Compare two text files.  Requires previous sorting.  Writes three columns: inFileA, inFileB, inFileAAndFileB.  See 'cmp' for binary files comparison.  See also: sort, uniq, comm, join, cut, diff, cmp.

command:  Allow to use a native command, bypassing an alias/function if set.  Builtins have higher precedence than executables, but can be disabled (see 'enable').  For diagnostics, see: 'alias <comm>', 'declare -f <comm>', 'which <comm>', 'enable -n'.  Examples:  command ls # 'ls' is usually aliased as 'ls color=always'  ;  command pwd --help # try with 'pwd' as builtin and as executable  ;  

cp:  Can be used to copy iso images into unmounted devices for os installation.  Examples:  cp -v debian.iso /dev/sdb  ;  

crontab:

curl:  Make requests from bash or commandline.  Options:  --request,-X GET, POST, other.  --header,-H header.  --data,-d data, use @ to source from file.  --url url.  --trace-time print timestamps with each socket line.  --max-time set a max time (seconds) to wait for server response (to request).  --connection-timeout set a timeout for establishing connection with server.  --local-port set a value or max-min value range for client port.  -0 like header 'connection: close'.  -s quiet mode, do not show progress.  -i show headers.  -v verbose.

cut:  Print fields separated by a delimiter.  See also: sort, uniq, comm, join, cut, diff, cmp, awk.  Options:  -d delimiter.  -f fields list.  Examples:  echo -e 'i_A_a\nii_B_b\niii_C_c\n' | cut -d '_' -f '1 3'  ;  echo -e 'i_A_a\nii_B_b\niii_C_c\n' | cut -d_ -f1,3  ;

d:

date:  Print date acording to different formats. Useful to get Unix time in seconds.  For process serialization/deserialization, prefer to use standard formats (iso-8601, rfc-3339). For human interpretation, custom format may be used.  Careful with TZ in git-bash, fails silently, seems to understand only local, GMT and UTC; check before by parsing as input (-d, see example).  Options:  +'%F %T' custom output format, see examples.  --iso-8601=seconds precision date, minutes, seconds, ns (d,m,s,ns).  --rfc-3339=seconds precision as with --iso-8601.  --rfc-email .  --date|-d input timestamp, use '@' for seconds since epoch  ;  --utc|-u output with utc timezone  ;  TZ=GMT output timezone (see examples).  Examples:  date +'%s'  ;  date +'%F %T %:z' # also '%z' is possible  ;  date +'%Y-%m-%d %H:%M:%S %Z'  ;  date --iso-8601=date # also 'd' is possible  ;  date --iso-8601=seconds --utc # also 's' is possible  ;  date --rfc-3339=s --utc  ;  date --rfc-email --utc  ;  date --date '@1001001001' +'%F %T %z' --utc  ;  date --date '2001-09-20 15:50:01 UTC' +'%s'  ;  date --date '@1001001001' --iso-8601=s --utc  ;  date --date '2001-09-20T11:50:01-04:00' +'%s'  ;  date --date '2001-09-20T15:50:01Z' +'%s' # 'Z' instead of '+00:00' is possible  ;  TZ=GMT date  ;

dd:  Copy byte streams.  It is not as fast as 'cp', 'cat' or 'pv'.  Using 'bs=1M' resulted in best possible speed (tested).  Using 'bs=4M' is recommended by Debian install manuals (not tested yet).  Advantages: (1) Limit input size when option 'count' is set; (2) Query progress with signal SIGUSR1 when in background.  In the tests below WSL was faster than git-bash, per 'dd' execution and per '/dev/random' bytes generation.   Options:  bs=1M block size, here with recommmended value.  count=1K how many blocks to process, skip in most cases.  if=/dev/random input file.  of=f.bin output file.  Examples:  time dd bs=1K count=1K if=/dev/random of=f.bin # increment bs or count to 10K-1M as convenient  ;  dd bs=1M if=f.bin of=f.bin.dd1M & pid=$! ; kill -SIGUSR1 $pid  ;  

declare:  Print available shell variables and functions.  Options:  -A associative.  -a array.  -i integer.  -p print variable.  -f print function.  Examples:  declare -p my_var  ;  declare -f my_function  ;  declare -A myvar=([name]='john', [surname]='doe')  ;  declare -i myint ; myint+=1  ; 

df:  List storage devices, free space, mount point.  Option '-h' human readable size.

dialog:  Create GUIs in bash using nCurses.

diff:  Compare two files line by line.  Options:  -u human readable, git-diff like.  -y side by side comparison, useful to check small variations, like properties.  -b ignore whitespace changes.  -B ignore whiteline changes.  --left-column do not double-print common lines when using -y.  --supress-common-lines do not print common lines when using -y. 

dirname:  See basename, realpath, shopt (globstar).  Examples:  find . -iname '*' | xargs -n1 realpath  ;  find . -iname '*' | xargs -n1 basename  ;  find . -iname '*' | xargs -n1 dirname  ;  

dmesg:  Query last linux system log entries.

dos2unix:  Convert txt from dos to unix..

dpkg-query:  Same as dpkg, but only for query options: -l, -s, -L, -S.  Shorter manpage.

dpkg:  Indicate installed package status (info); also files contained in installed packages.  See 'apt-file' for file search in not installed packages.  A workflow to install a program would be: (1) `dpkg` to check if program/package is installed; (2) `apt-file` to search package containing program; (3) `apt` to install package.  See also: apt, apt-cache, apt-file, dpkg-query.  Options:  -l list packages.  -s [package] status (info) of package.  -L [package] list files in package.  -S [file] search package which contains file.  Examples:  dpkg -l  ;  dpkg -s 'bash'  ;  dpkg -L 'bash'  ;  dpkg -S 'bin/bash'  ; 

du:  Disk usage by each directory.  Option '-h' human readable size.

e:

echo:  Print string. Careful with expansions from vars, to avoid it use double-quotes.  Example: echo * ; echo "*" ; echo $(ls) ; echo "$(ls)" ; echo "${my var}"

enable:  Enable, disable or list builtins.  Builtins have less precedence than aliases and functions but higher than executables.  See also: alias, function, bash, command.  For diagnostics, see: 'alias <comm>', 'declare -f <comm>', 'which <comm>', 'enable -n'.  Options:  -n list disabled builtins or disable builtin if indicated.  Example:  enable -a  ; enable  -n  ;  enable -n true ;  enable +n true

eval:  Execute bash command from string.  Careful with expansions, use double-quotes, see command 'echo'.   Examples: eval 'echo *' ; eval 'echo "*"' ;

expect:  Automate command execution after ssh connection.

f:

fdisk:  Example: fdisk -l

find:  Search files starting from indicated directory, applying several possible selection criteria.  If no dir is indicated, current dir is assumed.  See also: basename, dirname, realpath, shopt (globstar), xargs.  Options:  -name|iname filter by basename, 'ls' like.  -wholename|iwholename filter by dirname plus basename, 'ls' like.  -regex|iregex filter by dirname plus basename.  Examples:  find . # default  ;  find ~ -name '*bash*'  ;  find ~ -regex '.*bash.*'  ;  find . -name '*alberto*' | while read f ; do cp -v ${f} ../target/ ; done  ;  find . -iname '*alberto*' | xargs -I % cp -v % ../target/  ;  

function:  Declare functions, which can take positional parameters ($1, $2, $3, ...) and environment variables.  After aliases, functions have the higher precedence over builtins and executables.  Different from aliases, functions can be recursive, so careful with using its name into its implementation.  Use 'command' when recursion is not intended.  See also: alias, enable, bash, command.  For diagnostics, see: 'alias <comm>', 'declare -f <comm>', 'which <comm>', 'enable -n'.  Examples:  function my_function { echo $1 $2 $3 ; echo ; echo 'done!' ; } ; my_function  ;  function pwd { echo 'function pwd!!!' ; command pwd ; } # avoiding recursion  ;  

g:

git:  Version control system.  GUIs: gitk, git gui.  See also (prepend 'git', supress dashes): check-ignore, checkout, cherry-pick, config, diff, fetch, fsck, grep, log, ls-files, ls-tree, maintenance, push, rebase, reflog, restore, rev-list, show, stash, status, switch.

gitcheckignore:  (git check-ignore).  Check if file is being ignore according to .gitignore.  Options:  -v verbose.  Examples:  git check-ignore -v <filename>  ;  

gitcheckout:  Useful alias: git config --system alias.ch 'checkout'.  Several functions, as numbered below.  (1) Checkout commit-id (sync index and tree, clean stage).  (2) Checkout specific file from specific commit.  (3) Create new branch from current commit-id.  (4) Create orphan branch.  Git 'checkout' and 'show' share functionality of get specific file from commit-id into the tree.  Git 'restore' also does it, into tree and stage, but only from current branch.  See also: show, restore.  Options:  -b create new branch on current commit.  --orphan create new orphan branch.  Examples:  git checkout <commit-id> # default (1)  ;  git checkout <commit-id> -- <file-name> # specific file from specific commit (2)  ;  git checkout -b <branch> # new branch in current commit (3)  ;  git checkout --orphan <branch> # new orphan branch (4)  ;  git pull|merge --allow-unrelated-histories <branch> # see 'git checkout --orphan'  ;  

gitcherrypick:  (git cherry-pick).  Reconstructs commit(s) over another commit.  Under the hood, seems to work as rebase, only differing in resulting branches.  Thus, current branch and commits to reconstruct should have a common ancestor.  If not so, a merge-conflict will take place (similar situation to merge orphan branch).  Parts of Other commits not present as args may also be included in patch.  Options:  --no-commit,-n only modify tree, do not create commit.  Examples:  git cherry-pick <commit-id> # reconstruct <commit-id> on current branch  ;  git cherry-pick <c1>..<c2> # reconstruct commits, not including <c1>  ;  git cherry-pick <c1>^..<c2> # reconstruct commits, including <c1>  ;  

gitconfig:  Configure git.  Some commands do not require to define context, but it is healthy to always explicitly specify it.  Suggested --system configs: color.*, help.format, web.browser.  Suggested --global configs: alias.*, user.name, user.email.  Mandatory configurations (see examples): user.name 'John Doe', user.email 'john@email.com'.  Options:  --local current project context, "./.git/" (default for setting, if no context indicated).  --global user context, "${HOME}".  --system OS context, "/etc/".  --list configurations, considering all contexts if no one specified.  --get <key> value for config key, considering all contexts if no one specified.  --unset <key> remove configuration.  Examples:  git config --list  ;  git config --system --list | grep 'alias' # no result, alias.* must be --global  ;  git config --global --get 'color.status' # no result, color.* must be --system  ;  git config --global user.name 'John Doe' # set config  ;  git config --global alias.rs 'reset --soft' # set alias  ;  git config --global alias.pwd '!pwd' # '!' to escape git, execute bash  ;  git config --global --unset alias.pwd # remove config  ;  

gitdiff:  See diff between two commits.  For following examples, branch 'feat' is ahead of branch 'dev'.  Examples are useful with "git log" too.  See also: git log, git show.  Options:  --stat list modified files, indicating lines added/substracted.  -p show diff patch.  Examples:  git diff dev..feat  ;  git diff HEAD..feat # HEAD at dev  ;  git diff ..feat # HEAD at dev  ;  git diff dev..HEAD # HEAD at feat  ;  git diff dev.. # HEAD at feat # HEAD at dev  ;  git diff dev^..feat # mainly useful with "git log --graph"  ;  git diff HEAD^..feat # HEAD at dev, mainly useful with "git log --graph"  ;  git diff --stat -p dev.. # HEAD at feat  ;  git diff dev..feat **/log4j2.xml  ;  

gitfetch:  Fetch data from remote.  Options:  --tags sync tags with remote.  -f force (use with --tags)

gitfsck:  File system check.  Useful for listing dangling/unreachable commits.  See also: git reflog.  Options:  --dangling dangling commits (farest ones).  --lost-found write dangling commits in .git/lost-found/.  --unreachable unreachable commits (all, nearest to farest).  --no-reflog commits that used to be in a ref, but now aren’t, and are still in reflog (a bit confusing, be careful with HEAD).  Examples:  git fsck --lost-found  ;  git fsck --unreachable  ;  

gitgrep:  Grep files in current commit.  Examples:  git grep -i 'alberto' # grep all files  ;  git grep -i 'extends' -- *.java  ;  

gitlog:  List/query commits.  When querying for file, consider using "find -iname ..." and bash variable.  Works similar to "git show" and "git diff" regarding (suitable) options and arguments.  Options:  --graph: show graphical relationships/precedences.  --all: show commits in branches not related to current one.  --decorate: show aditional commit info.  -1: show last 1 commit (other numbers are possible).  --follow: when querying for file, include file-rename commits.  Examples:  git log --all --graph --decorate -2 # include other branches, show precedences, last two commits  ;  git log -3 -- <filename> # query file last 3 commits  ;  git log --follow -3 -- <filename> # query file last 3 commits including renames  ;  git log --no-walk --tags # only commits with tags  ;  

gitlsfiles:  List files in current commit.  It is closer to 'find . -wholename ${1}' than to 'ls ${1}'.  See also: find, basename, dirname, realpath, git ls-tree.  Examples:  git ls-files *application*  ;  

gitlstree:  List files in indicated commit, with blob info/hash/id ouput.  See also: git ls-files.  Options:  --full-tree all files.  -r recurse through directories.  Examples:  git ls-tree --full-tree -r dev # file tree in commit 'dev', do recursion  ;  git ls-tree --full-tree -r a2fg341bbc21f  ;  

gitmaintenance:  Perform maintenance on '.git' folder.  Accelerates git operations.  Actions:  run execute main maintenance actions / routines.  start execute softer / lesser actions.  Examples:  git maintenance run  ;  git maintenance start  ;

gitpush:  Push commit / tag to remote.  Options:  -d --delete delete remote branch/tag.  -f --force allow reset remote branch to previous commit, or move remote tag.  --force-with-lease safer than '--force'.  Examples:  # branch operations.  git push  # acts on current commit  ;  git push -f  ;  git push <remote> --set-upstream <branch>  ;  git push <remote> -d <branch>  ;  git push <remote> -f <branch>  ;  .  # tag operations.  git push <remote> <tag>  ;  git push <remote> -d <tag>  ;  git push <remote> -f <tag>  ;

gitrebase:  Re-build commits on another one.  When use interactively, use "pick" for first commit and "squash" for others to rebuild as unique commit.  See "vi" notes for search/replace text.  Options:  -i interactive.  Examples:  git rebase -i dev # rebuild current branch from 'dev'  ;  

gitreflog:  History of used branches / commits.  Useful for recovering dangling / unreachable commits.  Use along 'git gc' to delete dangling / unreachable commits (see example).  See also: git fsck.  Examples:  git reflog  ;  git reflog expire --expire-unreachable=now --all ; git gc --prune=now  ;  

gitrestore:  Restore file from branch (index) or remove file from stage.  See also: checkout, show.  Options:  --source branch index to restore file from; current branch if not indicated.  --staged remove file from stage.  Examples:  git restore <file-name> # restore file from current branch index  ;  git restore --source dev <file-name> # restore file from branch 'dev' index  ;  git restore --staged <file-name> # remove file from stage  ;

gitrevlist:  List commits in reverse chronological order (most recent first).  Options are to limit output.  Options: --all all commits.  Examples:  git rev-list --all  ;  

gitshow:  Show diff-like info regarding specific commit.  Also get specific file from specific commit.  Works similar to "git log" regarding (suitable) options and arguments.  Options:  --stat summarize files and change count.  Examples:  git show <commit-id> # show diff-like info of commit  ;  git show --stat <commit-id>  ;  git show --stat pretty='' <commit-id>  ;  git show <commit-id>:<file-name> # print to stdout file from commit  ;  git show --pretty='' --name-only <commit-id> # list files in commit  ; 

gitstash:  Save/manage local, temporal, work in progress.  A stash is essentially a patch, with associated stage info.  It is sort of a 'hidden commit', it can be viewed using 'git reflog stash', and 'git log stash' (also using option --all in both).  It is conservative to do 'git add .' before saving stash, to consider untracked files.  Use carefully, it's very easy to make a mistakes: losing stash(es) (recover a dropped stash is a complicated process), making live changes prone to conflicts with previous stash, applying/popping stash on wrong branch, losing untracked files.  A conservative strategy could be to have at most one stash listed (hot work in stand-by), commit only when stash list is empty, just using commands 'stash', 'list', 'show' and 'pop' (or 'apply' if convenient).  Local temporal-draft commits are a bit slower, but safer.  Examples:  git stash  ;  git stash list  ;  git stash show --stat -p <id>  ;  git stash pop  ;  git stash apply  ;  git stash drop  ;  git stash clear  ; 

gitstatus:  Check stage, files pending to commit, ignored files, others.  Options:  --ignored show ignored files by .gitignore rules.  Examples:  git status --ignored  ;  

gitswitch:  Change branch, synchronize tree.  See also: checkout.  Example:  git switch <branch-name>  ;  

gittag:  Tag actions on local repo.  See "git push" for tag actions on remote.  Options:  -d --delete remove existing tag, local.  -f --force change position of existing tag, local.  Examples:  git tag <tagname> # create tag  ;  git tag -d <tagname>  ;  git tag -f <tagname>  ;  

gradle:  Java project and dependency management.  Gradle can contain several projects, each consisting of several tasks.  File "settings.gradle" for initialization; file "build.gradle" for configuration and execution.  Convenient to set "alias g=./gradlew".  Examples:  gradle --help # about command itself  ;  gradle help # about project  ;  gradle help projects  ;  gradle tasks  ;  gradle help --task bootRun  ;  gradle clean  ;  gradle build  ;  gradle bootRun  ;  

grep:  Filter lines by pattern.  Options:  -v invert selection.  -i insensitive case.  -n line number.  -E extended regex.  -P perl compatible regex, does not require ANSI-C Quoting for hexadecimals.  --color=always|never|auto to highlight match.  -a allow lines with binary (not properly encoded) bytes.  -r recursive search.  -R like -r, also follow links.  Examples:  grep -v -a -P '^.*$' file.txt # (filter lines with binary bytes)  ;  grep -v -a -P '^[\x00-\x7f]*$' f1.txt # (filter lines with non-ascii characters)  ;

h:

i:

ifconfig:

ip:  List, manage network devices.  Example: ip link ; ip link set 'wlan0' up ; ip link set 'wlan0' down ;

j:

jar:  Perform 'create', 'extract' or 'list' operations on Java ARchive files.  Also useful to handle ZIP files.  Sequence: jar {ctxui}[vfmn0PMe] [jar-file] [manifest-file] [entry-point] [-C dir] file(s).  See also: 'tar'.  Actions:  -c create new JAR file.  -t list contents of JAR file.  -x extract from JAR file.  Options:  -v verbose output.  -f JAR file on which -c, -x or -t will operate.  -m file with info to include in manifest.  -0 no compression.  -M do not include manifest.  -e main class to indicate in manifest.  -C change directory for contents inclusion.  Examples:  jar -tf file.jar # list content in file.jar  ;  jar -xf file.jar # extract content from file.jar  ;  jar -cf file.jar $( ls ) # create file.jar containing all files (and folders) in current dir  ;  jar -cf file.jar -C ./src/ $( cd src ; ls ) # create file.jar containing all files (and folders) in dir src  ;  jar -cvfm file.jar manifest.txt src  ;  jar -cf0M file.zip src # create standard zip file (no compression, no manifest)  ;  

join:  Join two files, according to a common field (default: first field ).  See also: sort, uniq, comm, join, cut, diff, cmp, awk.  Options:  -t field separator.  Examples:  join -t ',' file1.txt file2.txt  ;  join -t '|' <(echo '1|Juan') <(echo '1|Arauca')  ;

jp2a:  Convert jpeg to ascii.

k:

kubectl:  Kubernetes client.  Examples:  # (1) KUBECTL GENERAL ALIAS OR HELPER VARIABLE.  kk='kubectl --kubeconfig '${kc_file}  ;  .  # (2) KUBECTL CHECK CONFIG.  $kk config get-contexts  ;  $kk config current-context  ;  .  # (3) KUBECTL CHECK POD.  $kk get pods  ;  $kk get pods | command grep ${pod_name_ref} | awk '{print $1}'  ;  $kk describe pod ${pod_id} |& tee ${file}  ;  .  # (4) KUBECTL LOGS FROM POD / CONTAINER.  $kk logs ${pod_id} --container ${container_in_pod} --tail 10 -f |& tee ${file}  ;  .  # (5) KUBECTL PORT FORWARD (ENABLE REQUESTS FROM LOCALHOST).  $kk get services # check pod port  ;  $kk port-forward service/${service_id} ${source_local_port}:${target_cluster_port}  ;  $kk port-forward deployment/${deployment_id} ${source_local_port}:${target_cluster_port}  ;  $kk port-forward ${pod_id} ${source_local_port}:${target_cluster_port} &  ;  .  # (6) KUBECTL SCALE DEPLOYMENT.  $kk get deployments  ;  $kk scale --replicas=1 deployment/${deployment_id}  ;  

l:

less:  Buffer file for reading on secreen.  Options below described are for prompt at screen bottom.  Options:  -R raw or display colors.  -M long prompt, works along option -n.  -m short prompt.  -N line number column.  -n line number in prompt.  -J status column.  -S chop long lines, line wrap.  -s hide multiple empty lines.  -I case insensitive search.  -G highlight search.  -x tab width.  Actions:  / - search forward.  ? - search backward.  n - next search result.  N -  previous search result.  & -  filter or grep.  [shift] + [f] - follow mode (tail like).

let:  Perform integer arithmetic calculations, assign result to variable.  Examples:  let 'b=2^16-1' 'mins=total_secs/60' 'secs=total_sec%60'  ;  

ln:  Create link.  By default, hard link.  Option -s to create soft link.  Careful in MinGW, soft links are not just 'pointers to filenames' as in Linux.  Check always links with ls -li.

lsblk:  List block devices, label can be displayed.  See also: 'mount', 'umount', 'parted'.  Options:  -O show all fields/columns.  Examples:  lsblk  ;  lsblk -O | less -M -S  ;  

lspci:  List devices associated to motherboard (usb, video, sound, wifi, lan), with brand and description.

m:

markdown:  Markdown reminder.  Options:  *bold*  ;  _italicize_  ;  ~strike-through~  ;  `inline-code-block`  ;  ```multiline-code-block```  ;  

minikube:  Manage Kubernetes single cluster for local development.  Actions help, status, delete, stop, start, start --driver=docker,  config set driver docker.  Examples:  minikube status  ;  minikube config set driver docker  ;  

mount:  Without params lists mounted points and info. With params mount points or devices.  See also: 'umount', 'lsblk', 'mountvol' (windows).  Examples:  mount ; mount -o 'remount,rw' /dev/sda2

mountvol:  Windows command, equivalent to Unix 'mount'.  With no args, shows help and lists volumes available, mounted and not mounted.  See also: cmd.exe.  Options:  /P unmount.  /E enable automatic mountig of new volumes.  Examples:  cmd.exe /C 'mountvol'  ;  cmd.exe /C 'mountvol F:\ /P' # unmount F drive  ;  cmd.exe /C 'mountvol F:\ \\?\Volume{96d242db-1b4f-11ed-ab66-d8cb8a835833}\' # mount specified volume as F drive  ;  cmd.exe /C 'mountvol /E' # enable automatic mounting of new volumes  ;  

mvn:  Maven, java project and dependency management.  Examples:  mvn -version  ;  mvn -help # command itself, not pom.xml  ;  mvn help:effective-pom | grep -i -n 'maven-.*plugin' # available plugins in pom.xml  ;  mvn jar:help  ;  mvn dependency:help  ;  mvn eclipse:help  ;  mvn spring-boot:help -Ddetail  ;  mvn help:describe -Dcmd=surefire:test -Ddetail  ;  mvn help:describe -Dcmd=spring-boot:repackage  ;  mvn dependency:list  ;  mvn dependency:tree  ;  mvn dependency:resolve -U # update dependencies  ;  mvn dependency:purge-local-repository # delete .m2 files, re-download them  ;  mvn clean package -Dmaven.test.skip=true # compile, make jar  ;  mvn resources:resources jar:jar spring-boot:repackage -Dmaven.test.skip=true # do not compile, use current target folder content, make jar  ;  mvn clean install -U -Dmaven.test.skip=true # update dependencies  ;  mvn eclipse:clean # delete eclipse project files  ;  mvn -T 1C package --offline # use multithread (1 per Core), do not check online repositories  ;  

mysql:  MySql database client.  See also: mysqldump.  Options:  -p prompt for password.  --password='1234' inline password.  Examples:  mysql --user root --host localhost --port 3306 -p < input.sql  ;  echo 'select 1 as my_int' | mysql --user root --host localhost --port 3306 -p  ;  mysql --user root --host localhost --port 3306 -p < <( echo 'select 1 as my_int' )  ;

mysqldump:  Client for database dump / export.  See also: mysql.  Example:  mysqldump --skip-lock-tables --routines --add-drop-table --disable-keys --extended-insert --user root --host localhost --port 3306 -p 'dbname' > outdump.sql  ;

n:

nl:  Number lines in file.  Example: nl file.txt > file.nl.txt

nmap:

nohup:  Pending

nslookup:

ntfsfix:  Fix ntfs filesystem partition or mounting. Example: ntfsfix /media/don/docs

o:

od:  Octal/hexadecimal dump of file.  See also: xxd.  Options:  -An supress file offset (left index column).  -tx1 hexadecimal format, one-byte grouped.  -w8 number of bytes per line, eight in this case.  -v supress *.  Examples:  od -v -An -tx1 file.bin > file.hex.txt  ;  echo -e 'AAAA\nBBBB\nCCCC\DDDD\nEEEE\nFFFF' | od -v -An -tx1 -w8  ;  

p:

parted:  Create labels and partitions (format drive).  Target drive should be unmounted.  See also: 'umount', 'lsblk'.  Actions:  mklabel create label; values 'msdos', 'gpt'.  mkpart create partition; values 'primary', 'logical', 'extended'.  Options:  -a alignment; value 'opt' for optimal.  Examples:  parted -a opt /dev/sdx mklabel msdos 0 9G # prompt message, change 0 to 2048s  ;  parted -a opt /dev/sdx mkpart primary 0 9G # prompt message, change 0 to 2048s  ; 

patch:  Apply diffs to text files.  See also: diff.  Options:  -R reverse.  Examples:  echo 'a' > f1.txt ; echo -e 'a\nb' > f2.txt ; diff f1.txt f2.txt > script.patch  ;  patch f1.txt script.patch  ;  patch -R f1.txt script.patch  ;  

ping:

printf:  Print formated, more strict than echo.  Examples:  printf %20s 'hello'  ;  printf %b '\x01\x02\x03'  ; 

process substitution:  Process stdin/stdout behaves "like a file".  Examples: cat <( ls ) ; ls > >( grep 'txt' ) ;

ps:  List system processes. Example: ps -o pid,uid,%cpu,%mem,command ax

pv:  Like cat, printing progress bar on stderr.

q:

r:

realpath:  See basename, dirname, shopt (globstar).  Examples:  find . -iname '*' | xargs -n1 realpath  ;  find . -iname '*' | xargs -n1 basename  ;  find . -iname '*' | xargs -n1 dirname  ;  

rsync:  Like scp, but more efficient.

s:

screen:  Share screen with other session over ssh.

sed:  Mainly for line by line substitution if criteria is met.  Can also print specific line.  Backreference '\0' is entire pattern match.  Escape sequences '\U' or '\L' to upper or lower case backreference.  See also: tr, truncate.  Options:  -E extended re.  -i.old inplace modify, create backup file with suffix.  -b do not erase \x0d (cr).  -f sed script file.  Examples:  sed -E '{ s/cat/dog/ig }' file.txt  ;  sed -n '{ 4p }' file.txt  ;  sed -f script.sed file.txt  ;  sed -E '{ s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g }' color-log.txt > no-color-log.txt  ;  sed -E '{ s/(.)$/\1\n/g }' file.txt > file_double_newline.txt  ;  sed -b -E '{ s/(\x0d)$/\1\n\1/g }' log.cr-nl.txt > log.cr-nl.in-between-white-line.txt  ;  grep --color=never -r 'word' ./ | sed -E '{ s/^([^:]+):.+$/\1/ }' # print files containing 'word'  ;  

seq:  Print sequence.  Examples: seq 5  ;  seq 0 5  ;  seq 0  0.5  5  ; 

shopt:  Manage shell options.  Setting 'globstar' (**) is usually disabled, useful when realpath's are required.  See also: basename, dirname, realpath, find.  Actions:  -p print all shell settings.  -s [option] enable (set) shell option.  -u [option] disable (unset) shell option.  Examples:  shopt -p  ;  shopt -s globstar ; echo ** # enable globstar  ;  shopt -u globstar ; echo ** # disable globstar  ;  

sort:  Order file lines, ascii criteria.  See also: sort, uniq, comm, join, cut, diff, cmp.

source:  Executes bash script as current shell/process, not as sub-shell/sub-process.

split:  Split file

stty:  Config / properties of shell.  Option 'size' to get screen size.  Example: stty size  ;

systemctl:  Check / manage services.  Actions:  enable|disable related to system startup.  Examples:  systemctl list-units --type=service --state=running  ;  systemctl status tomcat9  ;  systemctl disable tomcat 9 # disable at startup  ;  

t:

tar:  Perform 'create', 'extract' or 'list' operations on Tape ARchive files.  Sequence: tar {ctx}[vfajJzZ] [tar-file] [-C dir] file(s).  See also: jar.  Actions:  -c create new TAR.  -t list contents of TAR file.  -x extract from existing TAR.  Options:  -v verbose output.  -f TAR file on which -c, -x or -t will operate.  -a -j -J -z -Z compression options, see help.  -C change directory.  Examples:  tar -tf file.tar # list content in file.tar  ;  tar -xf file.tar # extract content from file.tar  ;  tar -cf file.tar $( ls  ) # create file.tar containing all files (and folders) in current dir  ;  tar -cf file.tar -C ./src/ $( cd src ; ls ) # create file.tar with all files (and folders) in dir src  ;  

taskkill:  Windows command, equivalent to unix 'kill -SIGKILL'.  When executing from git-bash, forward-slash should be doubled.  See also: 'cmd.exe', 'kill'.  Examples:  taskkill //f //pid 1234  ;  cmd.exe /C 'taskkill /f /pid 1234'  ;   

time:  Count time a process take to run.  Example: time sleep 5 ;

timeout:  Kill a process after n seconds.  Exmample: timeout 2 sleep 5 ;

tr:  Translate characters, one by one.  See also: sed, truncate.  Options:  -d delete caracter(s).  Examples:  echo 'a i u o e' | tr 'aeiou' 'AEIOU'  ;  echo -E 'a\ne\ni\no\nu' | tr -d '\n'  ;  echo 'a i u o e' | tr '[:lower:]' '[:upper:]'  ;  

truncate:  Eliminate bytes or characters from file.  Useful to eliminate trailing newline from text files.  See also: tr, sed.  Examples:  truncate -s -1 file.txt  ;  

type:  Indicate type of command: alias, function, builtin or executable from $PATH.  See also: which.  Example: type ls  ;

u:

ulimit:  Show/modify shell resource limits.  Options:  -a list all resource limits.  -n open-files limit.  Examples:  ulimit -a  ;  ulimit -n  ;  

umount:  Unmount drive.  See also: 'mount', lsblk, 'mountvol' (windows).  Examples:  umount /dev/sdb  ;   

uniq:  In a sorted file, eliminate duplicate lines.  See also: sort, uniq, comm, join, cut, diff, cmp.  Example: uniq file.sort.txt.old > file.sort.uniq.txt  ;

unix2dos:  Convert txt from unix to dos.

unset:  Unset variables or functions in shell.  Examples:  unset my_var  ;  unset -f my_function  ;  

update-grub:  Apply changes made on /etc/default/grub file.  Sometimes "grub-install" may be better.

users:  Pending

v:

vi:  Bash text editor.  Actions described are for prompt at screen bottom.  Actions:  ESC|i|v|V command, insert, visual, visual-line mode.  :q! quit without changes.  :w write file.  :q quit.  w|W|b|B next word, forward / backward.  f|F|t|T character find / to, forward / backward.  yy yank (copy) line, from 'command' mode.  y yank (copy) selection, from 'visual' mode.  p paste line or visual selection (starts at next-after-cursor).  dd|dw|d(arrow) cut/delete line / word / character.  /|? search regex, forward / backwards.  n|N next / previous search result.  *|# current cursor word, search forward / backward.  ctrl+Begin|End|(arrows), Begin|End fast cursor motion.  :{range}s/{regex}/{string}/{flags} for substitution.  :set number|nonumber to display line numbers.  :set hlsearch|nohlsearch to highlight search matches.  u|:u undo.  ctrl+r redo.  Examples:  :s/foo/bar/ # replace 'foo' with 'bar', current line, first ocurrence  ;  :%s/foo/bar/g # all lines, all ocurrences  ;  :.,$s/pick/squash/ # from current line to last line  ;  :%s/foo//gn # count matches  ;

w:

wc:  Count lines, words and characters or bytes.  Find line with max length.  Options: -l -w -c -L.  Example: wc file.txt  ;  wc -L file.txt

where:  Windows command, equivalent to unix 'which'.  See also: 'cmd.exe', 'taskkill', 'which'.  Example:  where notepad++  ;  

which:  Indicate if executable file is available from $PATH.  Windows equivalent is 'where'.  See also: type.  Examples:  which ls  ;  which pwd # 'pwd' can be builtin or executable  ; 

who:  List users signed in.

whoami:  Current shell user.

winget:  Windows command, download installers.  See also: cmd.exe, where, winpty.  Example:  winget install minikube  ;  

winpty:  Necessary sometimes in git-bash to execute Windows-based programs like wsl, python, ipython, openssl.  Examples:  winpty python  ;  

winvdesk:  Windows Virtual Desktop help.  Actions:  # WINDOWS TASKS.  [Alt] + [Tab] : Next right task.  [Alt] + [Tab] + [Shift]: Next left task.  .  # WINDOWS TASK VIEW.  [Windows] + [Tab]: Open Task View.  [Escape]: Close Task View.  .  # WINDOWS VIRTUAL DESKTOP.  [Windows] + [Ctrl] + [D]: Create new virtual desktop.  [Windows] + [Ctrl] + [RightArrow]: Move to next right virtual desktop.  [Windows] + [Ctrl] + [LeftArrow]: Move to next left virtual desktop.  [Windows] + [Ctrl] + [F4]: Close current virtual desktop.

wsl:  Windows command, execute Linux shells, Docker, other.  Options:  --help help.  --list list available distributions.  --list --running list running distributions.  --update update.  -d --distribution run specific distribution.  Examples:  wsl --list  ;  

x:

xargs:  Converts stdin into arguments for function.  If no function is indicated, default is 'echo'.  Very useful to use with functions which do not read from stdin, like 'ls', 'find', 'echo', 'realpath', 'basename', 'dirname'.  Sensible to special characters and escape sequences, careful.  Does not use aliases, but primitive functions; also 'command' is not available.  More complex functionality can be achieved using bash's "while" stdin (see 'find' examples).  Options:  -I % capture input into placeholder %.  -n 1 use one variable at a time.  -P 1 one parallel process.  Examples:  seq 5 | xargs  ;  seq 5 | xargs -n 1  ;  seq 5 | xargs -I% echo 'a: '%  ;  find . -iname '*' | xargs -I% ls -l %  ;  find . -iname '*' | xargs -n1 basename  ;  git branch --color=never | grep -v '\*' | xargs git branch -D  ;  git branch --color=never | tr '*' ' ' | xargs git checkout # (ensure first it's only 1 branch)  ;  

xxd:  Hexadecimal dump of file or stdin.  Useful as reminder of special/control ascii chars/bytes.  See also: od.  Options:  -c output columns (16 by default).  -ps simple hexadecimal dump.  -r along with -ps, reverse operation (hexadecimal to binary).  Examples:  echo -e -n 'A\x1fB' | xxd  ;  xxd -c8 file.bin  ;  xxd -ps file.bin  ;  xxd -ps -r file.hex.txt > file.bin  ;  

y:

yes:  Produces bulk output; with head limits quantity.  Example: yes 'hello world' | head -10

z:

