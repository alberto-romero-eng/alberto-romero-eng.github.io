# Git Help -- deprecated: 2023-07-13 07:52 -- updated: 2023-06-12 08:23



git checkout:
  Several functions, as numbered below.
  (1) Checkout commit-id (sync index and tree, clean stage).
  (2) Checkout specific file from specific commit.
  (3) Create new branch from current commit-id.
  (4) Create orphan branch.
  Git 'checkout' and 'show' share functionality of get specific file from commit-id into the tree.
  Git 'restore' also does it, into tree and stage, but only from current branch.
  See also: show, restore.
Options:
  -b create new branch on current commit.
  --orphan create new orphan branch.
Examples:
  git checkout <commit-id> # default (1)  ;  
  git checkout <commit-id> -- <file-name> # specific file from specific commit (2)  ;  
  git checkout -b # new branch in current commit (3)  ;  
  git checkout --orphan # new orphan branch (4)  ;  
  git pull|merge --allow-unrelated-histories # see 'git checkout --orphan'  ;  



git cherry-pick:
  Reconstructs commit(s) over another commit.
  Under the hood, seems to work as rebase, only differing in resulting branches.
  Thus, current branch and commits to reconstruct should have a common ancestor.
  If not so, a merge-conflict will take place (similar situation to merge orphan branch)
Options:
  --no-commit: only modify tree, do not create commit.
Examples:
  git cherry-pick <commit-id> # reconstruct <commit-id> on current branch  ;
  git cherry-pick <c1>..<c2> # reconstruct commits, not including <c1>  ;
  git cherry-pick <c1>^..<c2> # reconstruct commits, including <c1>  ;



git check-ignore:
  Check if file is being ignore according to .gitignore.
Options:
  -v verbose.
Examples:
  git check-ignore -v <filename>  ;  



git fetch:
  Fetch data from remote.
Options:
  --tags sync tags with remote.
  -f force (use with --tags)



git log:
  List/query commits.
  When querying for file, consider using "find -iname ..." and bash variable.
  Works similar to "git show" regarding (suitable) options and arguments.
Options:
  --graph: show graphical relationships/precedences.
  --all: show commits in branches not related to current one.
  --decorate: show aditional commit info.
  -1: show last 1 commit (other numbers are possible)
  --follow: when querying for file, include file-rename commits.
Examples:
  git log --all --graph --decorate -2 # include other branches, show precedences, last two commits ;
  git log -3 -- <filename> # query file last 3 commits;
  git log --follow -3 -- <filename> # query file last 3 commits including renames ;



git restore:
  Restore file from branch (index) or remove file from stage.
  See also: checkout, show.
Options:
  --source branch index to restore file from; current branch if not indicated
  --staged remove file from stage
Examples:
  git restore <file-name> # restore file from current branch index;
  git restore --source dev <file-name> # restore file from branch 'dev' index ;
  git restore --staged <file-name> # remove file from stage ;



git reflog:
  History of used branches / commits.
  Useful for recovering a deleted branch/commit.
Examples:
  git reflog  ;



git rebase:
  Re-build commits on another one.
  When use interactively, use "pick" for first commit and "squash" for others to rebuild as unique commit.
  See "vi" notes for search/replace text.
Options:
  -i interactive
Examples:
  git rebase -i dev # rebuild current branch from 'dev'  ;  



git show:
  Show diff-like info regarding specific commit.
  Also get specific file from specific commit.
  Works similar to "git log" regarding (suitable) options and arguments.
Options:
  --stat summarize files and change count.
Examples:
  git show <commit-id> # show diff-like info of commit  ;
  git show --stat <commit-id>  ;
  git show --stat pretty='' <commit-id>  ;
  git show <commit-id>:<file-name> # print to stdout file from commit  ;
  git show --pretty='' --name-only <commit-id> # list files in commit  ;



git switch:
  Change branch, synchronize tree.
  See also: checkout.
Example:
  Git switch <branch-name>  ;  



git status
  Check stage, files pending to commit, ignored files, others.
Options:
  --ignored show ignored files by .gitignore rules
Examples:
  git status --ignored  ;  



git stash:
  Save/manage local, temporal, fast changes.
  Does not get registered in git reflog.
  Careful.
Examples:
  git stash  ;
  git stash list  ;  
  git stash apply  ;
  git stash drop  ;


